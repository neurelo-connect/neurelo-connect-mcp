/* tslint:disable */
/* eslint-disable */
/**
 * Connect API
 * API for Neurelo Connect
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EndpointMetadata
 */
export interface EndpointMetadata {
    /**
     * A description of the query
     * @type {string}
     * @memberof EndpointMetadata
     */
    'description': string;
    /**
     * The endpoint to query (minus the base URL and `/endpoints/`)
     * @type {string}
     * @memberof EndpointMetadata
     */
    'path': string;
    /**
     * The HTTP method to use for the query
     * @type {string}
     * @memberof EndpointMetadata
     */
    'requestMethod': string;
    /**
     * The parameters to pass to the query
     * @type {{ [key: string]: QueryParameter; }}
     * @memberof EndpointMetadata
     */
    'params': { [key: string]: QueryParameter; };
}
/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface GetEndpoints200Response
 */
export interface GetEndpoints200Response {
    /**
     * 
     * @type {Array<EndpointMetadata>}
     * @memberof GetEndpoints200Response
     */
    'data': Array<EndpointMetadata>;
}
/**
 * 
 * @export
 * @interface GetTargets200Response
 */
export interface GetTargets200Response {
    /**
     * 
     * @type {Array<Target>}
     * @memberof GetTargets200Response
     */
    'data': Array<Target>;
}
/**
 * Description of a parameter for a query
 * @export
 * @interface QueryParameter
 */
export interface QueryParameter {
    /**
     * A description of the parameter
     * @type {string}
     * @memberof QueryParameter
     */
    'description': string;
    /**
     * JSON schema for the parameter
     * @type {{ [key: string]: any; }}
     * @memberof QueryParameter
     */
    'schema': { [key: string]: any; };
    /**
     * Whether the parameter is optional
     * @type {boolean}
     * @memberof QueryParameter
     */
    'optional': boolean;
    /**
     * The default value of the parameter, if not provided
     * @type {any}
     * @memberof QueryParameter
     */
    'default'?: any;
}
/**
 * 
 * @export
 * @interface ServerInfo
 */
export interface ServerInfo {
    /**
     * List of all available endpoints that the server supports
     * @type {Array<EndpointMetadata>}
     * @memberof ServerInfo
     */
    'endpoints': Array<EndpointMetadata>;
    /**
     * List of all available targets that the server supports
     * @type {Array<Target>}
     * @memberof ServerInfo
     */
    'targets': Array<Target>;
}
/**
 * 
 * @export
 * @interface ServiceStatus
 */
export interface ServiceStatus {
    /**
     * 
     * @type {boolean}
     * @memberof ServiceStatus
     */
    'ok': boolean;
}
/**
 * 
 * @export
 * @interface Target
 */
export interface Target {
    /**
     * 
     * @type {string}
     * @memberof Target
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Target
     */
    'description': string;
    /**
     * The type of the target database
     * @type {string}
     * @memberof Target
     */
    'engineType': string;
    /**
     * Whether the target allows raw readonly queries
     * @type {boolean}
     * @memberof Target
     */
    'allowsRawReadonlyQuery': boolean;
    /**
     * Whether the target allows raw read/write queries
     * @type {boolean}
     * @memberof Target
     */
    'allowsRawReadWriteQuery': boolean;
}
/**
 * 
 * @export
 * @interface TargetStatus
 */
export interface TargetStatus {
    /**
     * 
     * @type {string}
     * @memberof TargetStatus
     */
    'status': TargetStatusStatusEnum;
    /**
     * The version of the target database. Will be empty if the target is not connected.
     * @type {string}
     * @memberof TargetStatus
     */
    'engineVersionString'?: string;
}

export const TargetStatusStatusEnum = {
    Connected: 'connected',
    Disconnected: 'disconnected'
} as const;

export type TargetStatusStatusEnum = typeof TargetStatusStatusEnum[keyof typeof TargetStatusStatusEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Execute a workflow endpoint
         * @param {string} endpointPath 
         * @param {{ [key: string]: string; }} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeEndpointOnGet: async (endpointPath: string, params?: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpointPath' is not null or undefined
            assertParamExists('executeEndpointOnGet', 'endpointPath', endpointPath)
            const localVarPath = `/endpoints/{endpointPath}`
                .replace(`{${"endpointPath"}}`, encodeURIComponent(String(endpointPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (params !== undefined) {
                for (const [key, value] of Object.entries(params)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute endpoint
         * @param {string} endpointPath 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeEndpointOnPost: async (endpointPath: string, requestBody?: { [key: string]: any; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpointPath' is not null or undefined
            assertParamExists('executeEndpointOnPost', 'endpointPath', endpointPath)
            const localVarPath = `/endpoints/{endpointPath}`
                .replace(`{${"endpointPath"}}`, encodeURIComponent(String(endpointPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute a read/write query on the specified target
         * @param {string} targetSlug 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeReadWriteQuery: async (targetSlug: string, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetSlug' is not null or undefined
            assertParamExists('executeReadWriteQuery', 'targetSlug', targetSlug)
            const localVarPath = `/targets/{targetSlug}/read-write-query`
                .replace(`{${"targetSlug"}}`, encodeURIComponent(String(targetSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute a readonly query on the specified target
         * @param {string} targetSlug 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeReadonlyQuery: async (targetSlug: string, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetSlug' is not null or undefined
            assertParamExists('executeReadonlyQuery', 'targetSlug', targetSlug)
            const localVarPath = `/targets/{targetSlug}/readonly-query`
                .replace(`{${"targetSlug"}}`, encodeURIComponent(String(targetSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metadata for all available endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpoints: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the schema of the database. The specific format of the schema is database-specific.
         * @param {string} targetSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema: async (targetSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetSlug' is not null or undefined
            assertParamExists('getSchema', 'targetSlug', targetSlug)
            const localVarPath = `/targets/{targetSlug}/schema`
                .replace(`{${"targetSlug"}}`, encodeURIComponent(String(targetSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get server info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/server-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check workflow service status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check target database connection status
         * @param {string} targetSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetDbStatus: async (targetSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetSlug' is not null or undefined
            assertParamExists('getTargetDbStatus', 'targetSlug', targetSlug)
            const localVarPath = `/targets/{targetSlug}/db-status`
                .replace(`{${"targetSlug"}}`, encodeURIComponent(String(targetSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all available targets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Execute a workflow endpoint
         * @param {string} endpointPath 
         * @param {{ [key: string]: string; }} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeEndpointOnGet(endpointPath: string, params?: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeEndpointOnGet(endpointPath, params, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeEndpointOnGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute endpoint
         * @param {string} endpointPath 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeEndpointOnPost(endpointPath: string, requestBody?: { [key: string]: any; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeEndpointOnPost(endpointPath, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeEndpointOnPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute a read/write query on the specified target
         * @param {string} targetSlug 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeReadWriteQuery(targetSlug: string, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeReadWriteQuery(targetSlug, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeReadWriteQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute a readonly query on the specified target
         * @param {string} targetSlug 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeReadonlyQuery(targetSlug: string, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeReadonlyQuery(targetSlug, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.executeReadonlyQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get metadata for all available endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEndpoints(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEndpoints200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEndpoints(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEndpoints']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the schema of the database. The specific format of the schema is database-specific.
         * @param {string} targetSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchema(targetSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchema(targetSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSchema']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get server info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getServerInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check workflow service status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check target database connection status
         * @param {string} targetSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetDbStatus(targetSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetDbStatus(targetSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTargetDbStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all available targets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTargets200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTargets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Execute a workflow endpoint
         * @param {string} endpointPath 
         * @param {{ [key: string]: string; }} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeEndpointOnGet(endpointPath: string, params?: { [key: string]: string; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.executeEndpointOnGet(endpointPath, params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute endpoint
         * @param {string} endpointPath 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeEndpointOnPost(endpointPath: string, requestBody?: { [key: string]: any; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.executeEndpointOnPost(endpointPath, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute a read/write query on the specified target
         * @param {string} targetSlug 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeReadWriteQuery(targetSlug: string, body?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.executeReadWriteQuery(targetSlug, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute a readonly query on the specified target
         * @param {string} targetSlug 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeReadonlyQuery(targetSlug: string, body?: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.executeReadonlyQuery(targetSlug, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metadata for all available endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpoints(options?: RawAxiosRequestConfig): AxiosPromise<GetEndpoints200Response> {
            return localVarFp.getEndpoints(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the schema of the database. The specific format of the schema is database-specific.
         * @param {string} targetSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema(targetSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getSchema(targetSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get server info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerInfo(options?: RawAxiosRequestConfig): AxiosPromise<ServerInfo> {
            return localVarFp.getServerInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check workflow service status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: RawAxiosRequestConfig): AxiosPromise<ServiceStatus> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check target database connection status
         * @param {string} targetSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetDbStatus(targetSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<TargetStatus> {
            return localVarFp.getTargetDbStatus(targetSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all available targets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets(options?: RawAxiosRequestConfig): AxiosPromise<GetTargets200Response> {
            return localVarFp.getTargets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Execute a workflow endpoint
     * @param {string} endpointPath 
     * @param {{ [key: string]: string; }} [params] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public executeEndpointOnGet(endpointPath: string, params?: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).executeEndpointOnGet(endpointPath, params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute endpoint
     * @param {string} endpointPath 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public executeEndpointOnPost(endpointPath: string, requestBody?: { [key: string]: any; }, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).executeEndpointOnPost(endpointPath, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute a read/write query on the specified target
     * @param {string} targetSlug 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public executeReadWriteQuery(targetSlug: string, body?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).executeReadWriteQuery(targetSlug, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute a readonly query on the specified target
     * @param {string} targetSlug 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public executeReadonlyQuery(targetSlug: string, body?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).executeReadonlyQuery(targetSlug, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metadata for all available endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEndpoints(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEndpoints(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the schema of the database. The specific format of the schema is database-specific.
     * @param {string} targetSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSchema(targetSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSchema(targetSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get server info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getServerInfo(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getServerInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check workflow service status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatus(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check target database connection status
     * @param {string} targetSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTargetDbStatus(targetSlug: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTargetDbStatus(targetSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all available targets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTargets(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTargets(options).then((request) => request(this.axios, this.basePath));
    }
}



